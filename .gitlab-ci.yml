# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

image: maven:3.8.6-openjdk-18

cache:
  paths:
    - .m2/repository/
    - target/

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - report
  - debug
  - deploy

build:       # This job runs in the build stage, which runs first.
  stage: build
  script:
    - echo "Compiling the code..."
    - mvn compile
    - echo "Compile complete."

test:
  stage: test
  dependencies: 
    - build
  script:
    - echo "Running e2e tests..."
    - mvn clean verify
    - mkdir public
    - mv target/site/serenity/* public
    - echo "Testing complete"
  artifacts:
    when: always
    paths:
      - public
    expire_in: 1 week
  only:
    - master

deploy:           # This job runs in the deploy stage.
  stage: deploy   # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  variables:
    ARTIFACTORY_SERVER_ID: central
    ARTIFACT_NAME: leaseplan_project
  script:
    - echo "Deploying application..."
    #- mvn clean $MAVEN_CLI_OPTS package -DskipTests=true
    - mvn clean package
    # Download JFrog CLI
    -  curl -fL https://install-cli.jfrog.io | sh
    # configure artifactory server
    - jf c add $ARTIFACTORY_SERVER_ID --url="$MAVEN_REPO_URL/default-maven-local" --access-token="$MAVEN_ACCESS_TOKEN"
    - jf config show
    - jf rt bc
    - jf rt u target/*-tests.jar leaseplan/"$ARTIFACT_NAME"_"$CI_PIPELINE_ID.jar" --recursive=false
    - echo "Application successfully deployed."
  artifacts:
    when: on_success
    paths:
      - target/*.jar
  only:
    - master
